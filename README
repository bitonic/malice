We chose to implement the Alice compiler in haskell.
The compiler is consisted of 4 parts:
- The Parser:
  The lexer/parser is written with the aid of the parsec
  ( http://research.microsoft.com/en-us/um/people/daan/parsec.html ).
  Parsec is a monadic parser that does not separate the grammar for the language
  from the actual programming language you are writing the compiler with, like
  most bottom-up parser generators do.
  This gives you all the advantages of a wonderful languages like haskell while
  writing your parser and lets you forget about regular expressions.
  For more information: http://research.microsoft.com/en-us/um/people/daan/download/parsec/parsec.html
- The semantics checker:
  Once the AST is produced, the compiler checks the semantics and builds the
  symbol table in one go. To do that, we used the Error monad transformer, with a State monad
  as the inner monad. The Error monad is used to throw errors if we encounter some problem,
  short-circuiting the monad. The State monad inside it "brings around" the symbol table and the
  current position in the file.
- The IR generator
- The code generator